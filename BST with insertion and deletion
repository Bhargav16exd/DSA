#include <iostream>
using namespace std;

class Node{
    public:
    int data;
    Node *left;
    Node *right;
    public:
    Node(){
        left=nullptr;
        right=nullptr;
    }
    Node(int value){
        data=value;
        left=nullptr;
        right=nullptr;
    }
};

class Tree {
    public:
    Node *root;
    public:
    
    void insert(int value){
        root = insertHelper(root,value);
    }
    Node * insertHelper(Node* node ,int value){
        if(!node){
            return new Node(value);
        }
        if(node->data>value){
            node->left = insertHelper(node->left,value);
        }
        else if(node->data < value){
            node->right = insertHelper(node->right,value);
        }
        else{
            cout<<"Duplicate element found cannot be inserted"<<endl;
        }
        return node;
    }
    
    Node * findMin(Node* node){
        while(node->left!=nullptr){
            node=node->left;
        }
        return node;
    }
    
    Node * deleteNode(Node* node , int value){
        if(!node){
            cout<<"no element found"<<endl;
            return node;
        }
        if(node->data > value){
            node->left = deleteNode(node->left,value);
        }
        else if(node->data<value){
            node->right = deleteNode(node->right,value);
        }
        else if( node->data == value){
            
            if(node->left==nullptr){
                Node* temp = node->right;
                delete node;
                cout<<"Node deletion success"<<endl;
                return temp;
            }
            else if(node->right==nullptr){
                Node* temp = node->left;
                delete node;
                 cout<<"Node deletion success"<<endl;
                return temp;
            }
            
            Node *temp = findMin(node->right);
            
            node->data = temp->data;
            
            node->right = deleteNode(node->right,temp->data);
            
        }
        return node;
    }
    
    // Traversal
    
    Node * inOrder(Node *node){
        if(node){
            inOrder(node->left);
            cout<<node->data<<endl;
            inOrder(node->right);
        }
        return node;
    }
    
};

int main(){
    
    Tree t;
    t.insert(5);
    t.insert(76);
    t.insert(78);
    t.insert(54);
    t.insert(51);
    t.insert(57);
    t.inOrder(t.root);
    t.deleteNode(t.root ,76);
    t.inOrder(t.root);
    return 0;
}
