// Online C++ compiler to run C++ program online
#include <iostream>
using namespace std;

class Node{
    public:
    int data;
    Node* left;
    Node* right;
    int height;
    public:
    Node(){
        left = nullptr;
        right = nullptr;
    }
    Node(int value){
        data = value;
        left = nullptr;
        right = nullptr;
        
    }
};

class Tree{
    public:
    Node* root;
    
    // utility functions
    public:
    int getHeight(Node *node){
        if(!node){
            return 0;
        }
        return node->height;
    }
    int balanceFactor(Node *node){
        if(!node){
            return 0;
        }
        return getHeight(node->left)-getHeight(node->right);
    }
    Node *rightRotation(Node *y){
        Node* x = y->left;
        Node* T2 = x->right;
        
        x->right = y;
        y->left = T2;
        
        y->height = max(getHeight(y->left),getHeight(y->right)) +1;
        x->height = max(getHeight(x->left),getHeight(x->right)) +1;
        
        return x;
    }
    Node *leftRotation(Node *x){
        Node* y = x->right;
        Node* T2 = y->left;
        
        y->left = x;
        x->right = T2;
      
        y->height = max(getHeight(y->left),getHeight(y->right)) +1;
        x->height = max(getHeight(x->left),getHeight(x->right)) +1;
        
        return y;
    }
    
    Node* search(Node* node, int value){
        if(!node){
            cout<<"no data found"<<endl;
            return node;
        }
        if( value < node->data){
            node->left = search(node->left,value);
        }
        else if( value > node->data){
            node->right = search(node->right, value);
        }
        else if( node->data == value){
            cout<<"element found"<<endl;
            return node;
        }
        
    }    
    
    // insert function
    
    void insert(int value){
        root = insertHelper(root ,value);
    }
    
    Node * insertHelper(Node* node , int value){
        if(!node){
            return new Node(value);
        }
        if( value < node->data){
            node->left = insertHelper(node->left,value);
        }
        else if( value > node->data){
            node->right = insertHelper(node->right, value);
        }
        
    node->height=1+max(getHeight(node->left),getHeight(node->right));
        
    int BF = balanceFactor(node);
    
    if(BF >1 && value < node->left->data){
        return rightRotation(node);
    }
    if(BF <-1 && value > node->right->data){
        return leftRotation(node);
    }
    if(BF >1 && value > node->left->data){
        node->left = leftRotation(node);
        return rightRotation(node);
    }
    if(BF <-1 && value < node->right->data){
        node->right = rightRotation(node);
        return leftRotation(node);
    }
        return node;
    }
    
    Node* inOrder(Node* node){
        if(node){
            inOrder(node->left);
            cout<<node->data;
            inOrder(node->right);
        }
        return node;
    }
    
    
};

int main() {
    
    Tree avlTree;

    // Insert nodes into the AVL tree
    avlTree.insert(5);
    avlTree.insert(3);
    avlTree.insert(7);
    avlTree.insert(2);
    avlTree.insert(4);
    avlTree.insert(6);
    avlTree.insert(8);
    

    // Display the AVL tree in in-order after insertion
    cout << "In-order traversal after insertion: ";
    avlTree.inOrder(avlTree.root);
    cout << endl;

    avlTree.search(avlTree.root,99);
    return 0;
}
